

function f(x){
  console.log(`do - ${x}`);
}

function debounce(fun, delay) {
  //переменная введена для контроля временного периода.
  let doIt = true; 
  function result(...args) {
    if (doIt) {
      fun(...args);                          // функция вызывается
      doIt = false;                        //  чтоб следущие не вызывались
      setTimeout(()=>{doIt = true},delay); //через delay можно будет опять вызывать функцию.
      return;
    } 

    //следующий блок добавлен для наглядности, когда doIt - false
    if(!doIt) {
      console.log(`doIt - ${doIt} - arg: ${(args)}`);
    }
  }
  return result;
}

let func1 = debounce(f, 1000);

func1('now'); // выполняется немедленно
func1(2); // проигнорирован


// для удобства будем передавать аргументы в функцию такие же, как задержка.
setTimeout( () => func1(100), 100); // проигнорирован (прошло только 100 мс)
setTimeout( () => func1(1100), 1100); // выполняется
setTimeout( () => func1(1500), 1500); // проигнорирован (прошло только 400 мс от последнего вызова)
setTimeout( () => func1(2200), 2200); // выполнит. прошло 1100 мс с прошлого удачного вызова.
setTimeout( () => func1(2900), 2900); // не выполнит. 700
setTimeout( () => func1(3300), 3300); // выполнит. 1100 мс с прошлого удачного.
setTimeout( () => func1(4100), 4100); // не выполнит. 800мс
setTimeout( () => func1(5000), 5000); // выполнит. 1700мс
