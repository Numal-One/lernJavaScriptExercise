

function f(...args){
  console.log(`do - ${args}`);
}

function throttle(func, delay) {
  // разрешающий флаг для вызова функции
  let doIt = true;          
  // если будет вызов, пока идет таймаут, то аргумены запишуться в эту переменную
  let lastArgs = null;              
  
  function result(...args) {
    // если во время задержки вызвать функцию,
    // то пишем аргументы в переменную
    if (!doIt) {
      lastArgs = args;         
    }

    // если разрешающий флаг true то выполняем
    if (doIt) {
      func(...args);  
      //меняем флаг на ложь  
      doIt = false;
      // устанавливаем задержку для следующего выполнения 
      setTimeout(()=>{
        // что бы следующий вызов был успешен меняем значение флага
        // на true
        doIt = true; 
        // если были вызовы во время задержки, то...
        if (lastArgs !== null) {
          // выполняем функцию с последними аргументами
          func(...lastArgs);
          // обнуляем переменную с последними аргументами
          lastArgs = null; 
          // меняем разрешающий флаг на false
          doIt = false;
          // устанавливаем задержку для очередного выполнения
          setTimeout(() => {
            doIt = true;
          }, delay);
        }
      },delay);                
    } 

    
  }
  return result;
}

let func1 = throttle(f, 1000);


func1(1); // выполнится
func1(2); // проигнорирован
func1(3); // проигнорирован
func1(4); // выполниться после задержки.
setTimeout(()=> func1(1500), 1500); 
//не выполниться т.к. выполнилась функция с задержкой выше
setTimeout(()=> func1(2510), 2510); 
// выполниться. т.к. с прошлого выполнения прошло больше 1000мс
setTimeout(()=> func1(2520), 2520); 
setTimeout(()=> func1(2530), 2530); 
// выполниться, т.к. это последний вызов.
setTimeout(()=> func1('last'), 2630); 
